# DICTONARY DEF - http://www.wjh.harvard.edu/~inquirer/homecat.htm
# MARKER DEF    - http://www.wjh.harvard.edu/~inquirer/kellystone.htm
#
# Args:
#   dict.name: Name of the dictonary containing words to return
#
# Return:
#   Words from that dictornary
## collapse words with multiple entries into one entry. These are marked with a trailing #1, #2, ...
lex = read.csv("~/Google Drive/100 - Publicly hosted/rootR/Text Analysis/data/general_inquirer.csv", stringsAsFactors=FALSE)
lex$Entry = gsub("#1", "", lex$Entry)     # Remove #1 tags.
lex = lex[!grepl("#", lex$Entry), ]       # Remove entries that are still numbered (i.e. two or higher)
## Each dictonary is contained with a CSV value under column 'Dictonaries'
require(tidyr)
lex = unite(lex, col = "Dictonaries", 3:186, sep = ", ")
lex$Dictonaries <- gsub(", NA", "", lex$Dictonaries, ignore.case = T)
lex$Dictonaries <- gsub("NA, ", "", lex$Dictonaries, ignore.case = T)
lex$Dictonaries <- gsub(pattern = ", \\|.*$",replacement =  "", lex$Dictonaries, ignore.case = T)
return(tolower(lex$Entry[grepl(dict.name, lex$Dictonaries, ignore.case = T)]))
}
# Returns dictionaries
dict.list <- function(description=TRUE) {
# Lists the dictoraries avavialbe
require(RCurl)
if(description) {
# If return is TRUE
url <- getURL("https://docs.google.com/spreadsheets/d/1D7BZer9Ilp8tcwm9rZzKZJyWeeVfasteZ1MP7iaOi0w/pub?gid=0&single=true&output=csv")
sheet <- read.csv(text = url)
r <- unlist(sapply(paste(sheet$Name, " :: ", sheet$Description), message, simplify = T))
return(r)
}
lex = read.csv("~/Google Drive/100 - Publicly hosted/rootR/Text Analysis/data/general_inquirer.csv", stringsAsFactors=FALSE)
lex$Entry = gsub("#1", "", lex$Entry)     # Remove #1 tags.
lex = lex[!grepl("#", lex$Entry), ]       # Remove entries that are still numbered (i.e. two or higher)
## Each dictonary is contained with a CSV value under column 'Dictonaries'
require(tidyr)
lex = unite(lex, col = "Dictonaries", 3:186, sep = ", ")
lex$Dictonaries <- gsub(", NA", "", lex$Dictonaries, ignore.case = T)
lex$Dictonaries <- gsub("NA, ", "", lex$Dictonaries, ignore.case = T)
lex$Dictonaries <- gsub(pattern = ", \\|.*$",replacement =  "", lex$Dictonaries, ignore.case = T)
return(lex)
}
# Corpus --> Wordcloud
Make.Wordcloud <- function (corpus, words.to.remove=NULL, dict=NULL,
palette="Dark2", scaled=c(4,0.7), N=9) {
# Args:
#   corpus:          A corpus returned from the 'tm' package
#   words.to.remove: Words to *not* include in wordcloud
#   dict:            The name of the General Inquirer lexicon
#   palette:         Color palette from RColorBrewer
#   scaled:          A vector of length 2 indicating the range of the size of the words
#   N:               Max number of colors to return
#
# Returns:
#  Word cloud plot
# Define packages
packs = c("devtools", "openNLP","tm", "SnowballC",
"wordcloud", "RColorBrewer", "dplyr", "tidyr", "gridExtra")
# Require them, suppressing startup messages
suppressPackageStartupMessages(sapply(packs, require, character.only=TRUE))
## Control list (for TDM or DTM)
control.list <- list(
removePunctuation = T,
stripWhitespace   = T,
stopwords         = c(stopwords("english"), words.to.remove),
removeNumbers     = T,
content_transformer(tolower))
## Build Document Term Matrix
DTM <- DocumentTermMatrix(corpus, control.list)
## Gets words to return (depending if a dictionary was specified)
if(is.null(dict)) {
Word.freqs <- sort(rowSums(t(as.matrix(DTM))), decreasing = TRUE)
Words <- names(Word.freqs)
Freqs <- Word.freqs
} else {
# Get list of terms from doc.term.matrix (i.e. words used in corpus)
terms <- colnames(DTM)
# Extract the words (within the specified dictionary) from the lexicon.
sent.lex <- words.sentiment(dict.name = dict)
## Find the matching terms using the lexicons.
Words <- terms[terms %in% sent.lex]
Freqs <- colSums(as.matrix(DTM[ , Words]))
}
## Plot wordcloud
wordcloud(
words = Words,
freq = Freqs,
scale=scaled,
min.freq=1,
random.order = FALSE,
rot.per = 0,
color=brewer.pal(n=N, palette)[(N%/%2):N],
fixed.asp = FALSE)
}
# Full wrapper
wc.full <- function(query, sent.dict=NULL, brew.pal="Dark2", words.remove=NULL) {
Corpus <- Query.to.corpus(query)
require(grid)
Make.Wordcloud(Corpus, words.to.remove=c(tolower(query), words.remove), dict=sent.dict,
palette=brew.pal, scaled=c(4,0.7), N=9)
grid::grid.text(
label = paste0("Top words from tweets containing '", query, "'"),
x     = unit(0.005, "npc"),
y     = unit(0.995, "npc"),
just  = c("left", "top"),
gp    = gpar(
fontface = "bold",
family="Open Sans",
col = "#333F48",
cex=0.8))
}
# # # # # # # # #
# #    Search   #
# # # # # # # # #
#
# path: Query --> Search Twitter --> Corpus --> Wordcloud
# fxn:  Query.to.corpus -----------> Make.Wordcloud --> WC
wc.full("Zika")
wc.full("Zika", words.remove = "virus")
wc.full("#Zika")
wc.full("Zika", words.remove = "zika")
wc.full("#Zika", words.remove = "zika")
wc.full("#ZikaVirus", words.remove = c("zika", "virus", "zikavirus"))
NA==NA
NA!=NA
NA>NA
NA>=NA
NA!=NULL
NA!=NULL
NA==NULL
1==NULL
1==1
1!=NULL
?logical(0)
require(devtools)
install_github("hadley/tidyr")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:tidyr", unload=TRUE)
x <- geo.make(state = "TX", tract = "*")
x <- geo.make(state = "TX", tract = "*", county = "*")
tracts <- tigris::tracts(state="TX", cb=T)
require(leaflet)
leaflet(tracts) %>% addProviderTiles("Stamen.TonerHybrid")
leaflet(tracts) %>% addProviderTiles("Stamen.TonerHybrid") %>% addPolygons()
require(acs)
Insurance <- acs.fetch(
geography    = geo.make(state = "TX", tract = "*", county = "*"),
table.number = "C27010",    # Table showing 'Health Insurance'
col.names    = "pretty")    # Gives the full column definitions
Insurance <- acs.fetch(
geography    = geo.make(state = "TX", tract = "*", county = "*"),
table.number = "B27001",    # Table showing 'Health Insurance'
col.names    = "pretty")    # Gives the full column definitions
require(acs)
Insurance <- acs.fetch(
geography    = geo.make(state = "TX", tract = "*", county = "*"),
table.number = "B27001",    # Table showing 'Health Insurance'
col.names    = "pretty")    # Gives the full column definitions
acs::api.key.install(key="4007f7898363af014bf69487e92d121b63192af7")
Insurance <- acs.fetch(
geography    = geo.make(state = "TX", tract = "*", county = "*"),
table.number = "B27001",    # Table showing 'Health Insurance'
col.names    = "pretty")    # Gives the full column definitions
acs.lookup(keyword = "Health")
acs.lookup(keyword = "Insurance")
acs.lookup(keyword = "Health Insurance")
acs.fetch
Insurance <- acs.fetch(endyear = 2012,
geography    = geo.make(state = "TX", tract = "*", county = "*"),
table.number = "B27001",    # Table showing 'Health Insurance'
col.names    = "pretty")    # Gives the full column definitions
acs.fetch(geography=geo.make(state="IN"), table.number="S2503", endyear=2012)
acs.fetch(geography=geo.make(state="IN"), table.number="S2503", endyear=2012, span = 1)
acs.fetch(geography=geo.make(state="IN"), table.number="B01003", endyear=2012, span = 1)
acs.fetch(geography=geo.make(state="IN"), table.number="S2503", endyear=2012, span = 1)
acs.fetch(geography=state.IN,table.number="B01003")
acs.fetch(geography=geo.make(state="IN"),table.number="B01003")
acs.fetch(geography=geo.make(state="TX"),table.number="S2503", span = 1)
acs.fetch(geography=geo.make(state="TX"),table.number="S2503", span = 1, endyear = 2010)
Insurance@estimate %>% as.data.frame.table() %>% head()
Insurance@estimate %>% as.data.frame.table() %>% .$Var1 %>% unique()
Insurance@estimate %>% as.data.frame.table() %>% .$Var2 %>% unique()
Insurance <- acs.fetch(endyear = 2012,
geography    = geo.make(state = "TX", tract = "*", county = "*"),
table.number = "B27015",    # Table showing 'Health Insurance'
col.names    = "pretty")    # Gives the full column definitions
acs_data <- acs.fetch(endyear=2012, col.names="pretty", # Gives the full column definitions
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "B27015")                              # Table showing 'Health Insurance'
acs_data@estimate %>% as.data.frame() %>% glimpse()
require(tidyr)
acs_data@estimate %>% as.data.frame() %>% glimpse()
require(dplyr)
acs_data@estimate %>% as.data.frame() %>% glimpse()
acs_df <- as.data.frame(acs_data@estimate) %>% tbl_df()
acs_df$tract <- acs_df@geography$tract
acs_df$tract <- acs_data@geography$tract
acs_df %>% gather(key, value, -tract)
acs_df       <- acs_df %>% gather(key, value, -tract)
acs_df$key %>% unique()
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months", "", key))
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months", "", key)) %>% .$key %>% unique()
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"))
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":")
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total")
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="")
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!="With health insurance coverage")
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage")
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(Insurance = gsub(" With health insurance coverage ", "", Insurance))
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(Insurance = gsub(" With health insurance coverage ", "", Insurance)) %>%
.$Insurance %>% unique()
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(
Insurance = gsub("With private health insurance", "Private Health Insurance", Insurance),
Insurance = gsub("With public coverage", "Public Health Insurance", Insurance),
Insurance = gsub(" No health insurance coverage", "No Health Insurance", Insurance)) %>%
.$Insurance %>% unique()
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(
Insurance = gsub(" With health insurance coverage ", "", Insurance),
Insurance = gsub("With private health insurance",    "Private Health Insurance", Insurance),
Insurance = gsub("With public coverage",             "Public Health Insurance", Insurance),
Insurance = gsub(" No health insurance coverage",    "No Health Insurance", Insurance)) %>%
.$Insurance %>% unique()
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(
Insurance = gsub(" With health insurance coverage ", "", Insurance),
Insurance = gsub("With private health insurance",    "Private Health Insurance", Insurance),
Insurance = gsub("With public coverage",             "Public Health Insurance", Insurance),
Insurance = gsub(" No health insurance coverage",    "No Health Insurance", Insurance)) %>%
.$Income %>% unique()
acs_df       <- as.data.frame(acs_data@estimate) %>% tbl_df()
acs_df$tract <- acs_data@geography$tract
acs_df       <- acs_df %>% gather(key, Population, -tract)
acs_df %>% mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(
Insurance = gsub(" With health insurance coverage ", "", Insurance),
Insurance = gsub("With private health insurance",    "Private Health Insurance", Insurance),
Insurance = gsub("With public coverage",             "Public Health Insurance", Insurance),
Insurance = gsub(" No health insurance coverage",    "No Health Insurance", Insurance))
acs_df       <- as.data.frame(acs_data@estimate) %>% tbl_df()
acs_df$Tract <- acs_data@geography$tract
acs_df       <- acs_df %>% gather(key, Population, -Tract)
acs_df       <- as.data.frame(acs_data@estimate) %>% tbl_df()
acs_df$Tract <- acs_data@geography$tract
acs_df       <- acs_df %>% gather(key, Population, -Tract) %>%
mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(
Insurance = gsub(" With health insurance coverage ", "", Insurance),
Insurance = gsub("With private health insurance",    "Private Health Insurance", Insurance),
Insurance = gsub("With public coverage",             "Public Health Insurance", Insurance),
Insurance = gsub(" No health insurance coverage",    "No Health Insurance", Insurance))
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population))
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
str()
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3))
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract")
require(tigris)
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract")
require(tigris)
require(tigris)
tracts <- tracts(state="TX", cb=T)
require(dplyr)
require(tidyr)
require(leaflet)
require(acs)
# Pull data from Census API
acs_data <- acs.fetch(endyear=2012, col.names="pretty", # Gives the full column definitions
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "B27015")                              # Table showing 'Health Insurance'
acs_df       <- as.data.frame(acs_data@estimate) %>% tbl_df()
acs_df$Tract <- acs_data@geography$tract
# Make tidy data and clean up names
acs_df       <- acs_df %>% gather(key, Population, -Tract) %>%
mutate(key = gsub("Health Insurance.+12 Months: ", "", key)) %>% #.$key %>% unique()
separate(key, into=c("Income", "Insurance"), sep=":") %>%
filter(Income!="Total", Insurance!="", Insurance!=" With health insurance coverage") %>%
mutate(
Insurance = gsub(" With health insurance coverage ", "", Insurance),
Insurance = gsub("With private health insurance",    "Private Health Insurance", Insurance),
Insurance = gsub("With public coverage",             "Public Health Insurance", Insurance),
Insurance = gsub(" No health insurance coverage",    "No Health Insurance", Insurance))
p <- colorNumeric("RdYlBu", domain = NULL)
View(acs_df)
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
filter(Insurance=="No Health Insurance") %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract") %>%
leaflet() %>%
addProviderTiles("Stamen.TonerHybrid") %>%
addPolygons(
fillColor = ~p(PerIns),
color="#b2aeae", fillOpacity=0.5, weight=1, smoothFactor=0.2) %>%
addLegend(pal=p, values=~PerIns)
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
filter(Insurance=="No Health Insurance") %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract") %>%
leaflet() %>%
addProviderTiles("Stamen.TonerHybrid") %>%
addPolygons(
fillColor = ~p(PerIns),
color="#b2aeae", fillOpacity=~Population, weight=1, smoothFactor=0.2) %>%
addLegend(pal=p, values=~PerIns)
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
filter(Insurance=="No Health Insurance") %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract") %>%
leaflet() %>%
addProviderTiles("Stamen.TonerHybrid") %>%
addPolygons(
fillColor = ~p(PerIns),
color="#b2aeae", fillOpacity=~percent_rank(Population), weight=1, smoothFactor=0.2) %>%
addLegend(pal=p, values=~PerIns)
acs_df %>%
group_by(Tract, Insurance) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
filter(Insurance=="No Health Insurance") %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract") %>%
leaflet() %>%
addProviderTiles("Stamen.TonerHybrid") %>%
addPolygons(
fillColor = ~p(PerIns),
color="#b2aeae", fillOpacity=~percent_rank(desc(Population)), weight=1, smoothFactor=0.2) %>%
addLegend(pal=p, values=~PerIns)
p <- colorNumeric("Blues", domain = NULL)
acs_df$Income %>% unique()
acs_df %>%
# group_by(Tract, Insurance) %>%
group_by(Tract, Income) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
# filter(Insurance=="No Health Insurance") %>%
filter(Income=="Under $25,000") %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract") %>%
leaflet() %>%
addProviderTiles("Stamen.TonerHybrid") %>%
addPolygons(
fillColor = ~p(PerIns),
color="#b2aeae",
fillOpacity= 0.5,#~percent_rank(desc(Population)),
weight=1, smoothFactor=0.2) %>%
addLegend(pal=p, values=~PerIns)
acs_df %>%
# group_by(Tract, Insurance) %>%
group_by(Tract, Income) %>%
summarise(Population = sum(Population)) %>%
mutate(PerIns = round(Population/sum(Population) ,3)) %>%
# filter(Insurance=="No Health Insurance") %>%
filter(Income=="Under $25,000") %>%
geo_join(
spatial_data = tracts,
data_frame = .,
by_sp="TRACTCE",
by_df="Tract") %>%
leaflet() %>%
addProviderTiles("Stamen.TonerHybrid") %>%
addPolygons(
fillColor = ~p(PerIns),
color="#b2aeae",
fillOpacity= 0.5,#~percent_rank(desc(Population)),
weight=0, smoothFactor=0.2) %>%
addLegend(pal=p, values=~PerIns)
acs_data <- acs.fetch(endyear=2012, col.names="pretty",    # gives full names
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "C03002")
acs_data <- acs.fetch(endyear=2012, col.names="pretty", span = 3,
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "C03002")
acs_data <- acs.fetch(endyear=2011, col.names="pretty", span = 3,
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "C03002")
acs_data <- acs.fetch(endyear=2011, col.names="pretty", span = 1,
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "C03002")
acs_data <- acs.fetch(endyear=2011, col.names="pretty", span = 1,
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "B03002")
acs_data <- acs.fetch(endyear=2011, col.names="pretty", span = 3,
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "B03002")
acs_data <- acs.fetch(endyear=2011, col.names="pretty", span = 5,
geography = geo.make(state="TX", tract="*", county="*"),
table.number = "B03002")
require(googlesheets)
gs_title("Life Tables") %>% gs_read_csv("TX-Total") %>% rio::export(file="LifeTable_TX.csv")
require(dplyr)
require(ggplot2)
require(googlesheets)
gs_title("Life Tables") %>% gs_read_csv("TX-Total") %>% rio::export(file="LifeTable_TX.csv")
gs_title("Life Tables") %>% gs_read_csv("TX-Total") %>% rio::export(file="LifeTable_TX.csv")
gs_title("Life Tables")
gs_title("Life Tables") %>% gs_read_csv("TX-Total")
gs_title("Life Tables") %>% gs_read_csv("TX-Total") %>% rio::export(file="LifeTable_TX.csv", format=",")
gs_title("Life Tables") %>% gs_read_csv("TX-Total") %>% rio::export(file="LifeTable_TX.csv", format="csv")
setwd("~/Github/SOC319")
LT <- read.csv("LifeTable_TX.csv")
gs_title("Life Tables") %>% gs_read_csv("TX-Total") %>% rio::export(file="LifeTable_TX.csv", format="csv")
LT <- read.csv("LifeTable_TX.csv")
LT$Age.Group <- factor(LT$Age.Group, ordered = T)
abbreviate("shouldn’t")
abbreviate("shouldnt")
abbreviate("performance")
abbreviate("performance", 5)
abbreviate("performance", 6)
abbreviate("performance", 8)
LT %>% ggplot(aes(x=Age.Group, y=Population)) + geom_bar(aes(width=Years))
LT %>% ggplot(aes(x=Age.Group, y=Population)) + geom_bar(aes(width=Years), stat="identity")
LT %>% ggplot(aes(x=Age.Group, y=Population)) + geom_bar(aes(width=Years), stat="identity") + facet_grid(Sex~Race)
LT %>% ggplot(aes(x=Age.Group, y=Population)) + geom_bar(stat="identity") + facet_grid(Sex~Race)
require(ggthemes)
LT %>% ggplot(aes(x=Age.Group, y=Population)) + geom_bar(aes(fill=Age.Group), stat="identity") + facet_grid(Race~Sex)
LT %>% ggplot(aes(x=Age.Group, y=Population)) + geom_bar(aes(fill=Age.Group), stat="identity") + facet_grid(Race~Sex) + coord_flip()
unique(LT$Age.Group)
LT$Age.Group <- factor(LT$Age.Group,
levels = c("<1", "1-4", "5-9", "10-14", "15-19", "20-24",
"25-29", "30-34", "35-39", "40-44", "45-49",
"50-54", "55-59", "60-64", "65-69", "70-74",
"75+"),
ordered = T)
unique(LT$Age.Group)
LT %>% ggplot(aes(x=Age.Group, y=Population)) + geom_bar(aes(fill=Age.Group), stat="identity") + facet_grid(Race~Sex) + coord_flip()
LT$Sex2 <- 1
LT$Sex2[LT$Sex=="Males"] <- -1
View(LT)
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Race), stat="identity") + coord_flip()
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Race), stat="identity", position = "dodge") + coord_flip()
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Race), stat="identity", position = "dodge") + coord_flip() + scale_y_continuous(labels = scales::comma)
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Race), stat="identity", position = "dodge") + coord_flip() + scale_y_continuous(labels = abs(scales::comma))
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Race), stat="identity", position = "dodge") + coord_flip() + scale_y_continuous(labels = scales::comma) + theme_fivethirtyeight() + scale_fill_fivethirtyeight()
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Race), stat="identity", position = "dodge") + coord_flip() + scale_y_continuous(labels = scales::comma) + theme_fivethirtyeight() + scale_fill_fivethirtyeight() + facet_wrap("Race") + guides(fill=F)
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Race), stat="identity", position = "dodge") + coord_flip() + scale_y_continuous(labels = scales::comma) + theme_fivethirtyeight() + scale_fill_fivethirtyeight() + facet_wrap("Race", ncol=1) + guides(fill=F)
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Sex), stat="identity", position = "dodge") + coord_flip() + scale_y_continuous(labels = scales::comma) + theme_fivethirtyeight() + scale_fill_fivethirtyeight() + facet_wrap("Race", ncol=1) +
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Sex), stat="identity", position = "dodge") + coord_flip() + scale_y_continuous(labels = scales::comma) + theme_fivethirtyeight() + scale_fill_fivethirtyeight() + facet_wrap("Race", ncol=1)
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Sex), stat="identity") + coord_flip() + scale_y_continuous(labels = scales::comma) + theme_fivethirtyeight() + scale_fill_fivethirtyeight() + facet_wrap("Race", ncol=1)
LT %>% ggplot(aes(x=Age.Group, y=Population*Sex2)) + geom_bar(aes(fill=Sex), stat="identity", position = "identity") + coord_flip() + scale_y_continuous(labels = scales::comma) + theme_fivethirtyeight() + scale_fill_fivethirtyeight() + facet_wrap("Race", ncol=1)
